// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace SchoolAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.CourseAssignment", b =>
                {
                    b.Property<string>("ca_title")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ca_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("course_id")
                        .HasColumnType("int");

                    b.Property<int>("cs_id")
                        .HasColumnType("int");

                    b.Property<int?>("sectioncs_id")
                        .HasColumnType("int");

                    b.HasKey("ca_title");

                    b.HasIndex("sectioncs_id");

                    b.ToTable("CourseAssignments");

                    b.HasData(
                        new
                        {
                            ca_title = "Testing Title Man",
                            ca_description = "Description of Title",
                            course_id = 999,
                            cs_id = 999
                        });
                });

            modelBuilder.Entity("Entities.Models.CourseSection", b =>
                {
                    b.Property<int>("cs_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("course_id")
                        .HasColumnType("int");

                    b.Property<int?>("course_id1")
                        .HasColumnType("int");

                    b.Property<DateTime>("cs_create_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("cs_end_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("cs_start_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("cs_update_date")
                        .HasColumnType("datetime2");

                    b.HasKey("cs_id");

                    b.HasIndex("course_id1");

                    b.ToTable("CourseSections");

                    b.HasData(
                        new
                        {
                            cs_id = 999,
                            course_id = 999,
                            cs_create_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cs_end_date = new DateTime(2020, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cs_start_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            cs_update_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.Courses", b =>
                {
                    b.Property<int>("course_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("course_created_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("course_description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("course_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("course_updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("course_id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            course_id = 999,
                            course_created_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            course_description = "Test Course Description",
                            course_name = "Test Course",
                            course_updated_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            course_id = 99,
                            course_created_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            course_description = "Test Course Description",
                            course_name = "Test Course",
                            course_updated_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            course_id = 9,
                            course_created_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            course_description = "Test Course Description",
                            course_name = "Test Course",
                            course_updated_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.SectionEnroll", b =>
                {
                    b.Property<int>("section_key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("cs_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("se_created_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("se_end_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("se_start_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("se_updated_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("section_key");

                    b.HasIndex("cs_id");

                    b.ToTable("SectionEnrolls");

                    b.HasData(
                        new
                        {
                            section_key = 9,
                            cs_id = 999,
                            se_created_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            se_end_date = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            se_start_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            se_updated_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            user_id = 999
                        });
                });

            modelBuilder.Entity("Entities.Models.StudentSectionEnroll", b =>
                {
                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<int>("section_key")
                        .HasColumnType("int");

                    b.Property<int?>("section_key1")
                        .HasColumnType("int");

                    b.Property<int?>("user_id1")
                        .HasColumnType("int");

                    b.HasKey("user_id", "section_key");

                    b.HasIndex("section_key1");

                    b.HasIndex("user_id1");

                    b.ToTable("StudentSectionEnroll");
                });

            modelBuilder.Entity("Entities.Models.Users", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("enroll_status")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sys_role_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("datetime2");

                    b.HasKey("user_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            user_id = 999,
                            created_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            email = "testStudent@school.com",
                            enroll_status = 0,
                            name = "Test User",
                            password = "TESTtest",
                            sys_role_id = 0,
                            updated_date = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.CourseAssignment", b =>
                {
                    b.HasOne("Entities.Models.CourseSection", "section")
                        .WithMany("courseAssignments")
                        .HasForeignKey("sectioncs_id");

                    b.Navigation("section");
                });

            modelBuilder.Entity("Entities.Models.CourseSection", b =>
                {
                    b.HasOne("Entities.Models.Courses", "course")
                        .WithMany()
                        .HasForeignKey("course_id1");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Entities.Models.SectionEnroll", b =>
                {
                    b.HasOne("Entities.Models.CourseSection", "CourseSection")
                        .WithMany()
                        .HasForeignKey("cs_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseSection");
                });

            modelBuilder.Entity("Entities.Models.StudentSectionEnroll", b =>
                {
                    b.HasOne("Entities.Models.SectionEnroll", "section")
                        .WithMany("allEnrolledSections")
                        .HasForeignKey("section_key1");

                    b.HasOne("Entities.Models.Users", "user")
                        .WithMany("allEnrolledSections")
                        .HasForeignKey("user_id1");

                    b.Navigation("section");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Entities.Models.CourseSection", b =>
                {
                    b.Navigation("courseAssignments");
                });

            modelBuilder.Entity("Entities.Models.SectionEnroll", b =>
                {
                    b.Navigation("allEnrolledSections");
                });

            modelBuilder.Entity("Entities.Models.Users", b =>
                {
                    b.Navigation("allEnrolledSections");
                });
#pragma warning restore 612, 618
        }
    }
}
